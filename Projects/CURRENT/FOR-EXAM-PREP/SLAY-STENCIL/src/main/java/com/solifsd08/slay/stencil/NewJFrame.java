package com.solifsd08.slay.stencil;

import java.io.File;
import javax.swing.JFileChooser;

/*
How the file chooser works:
1. btSelectDirActionPerformed( xxx evt) {} -- auto generated, based on "Design" setup!!
2. ^^ edit this to run the code for your program's logic 
2.a. For this program: declare a chooser, i.e. new javax.swing.JFileChooser
2.b. Set parameters of this chooser (a chooser is the "open a file" window)
2.c. Must have a helper class+method (custom) so that this method uses the same "chooser" if the button is clicked multiple times.
2.d. set current directory, file selection mode, dialog title
3. add code in if statement: for when a choice is made
3.a this code includes changing the text on the main window, or opening new window, etc.

*/








public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btSelectDir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lblDirPath = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblSizeNonRec = new javax.swing.JLabel();
        lblSizeRec = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btSelectDir.setText("Select a directory ...");
        btSelectDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSelectDirActionPerformed(evt);
            }
        });

        jLabel1.setText("Non-recursive directory size:");

        lblDirPath.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDirPath.setText("...");

        jLabel3.setText("Recursive directory size:");

        lblSizeNonRec.setText("...");

        lblSizeRec.setText("...");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblSizeRec, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblSizeNonRec, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btSelectDir, javax.swing.GroupLayout.PREFERRED_SIZE, 652, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDirPath, javax.swing.GroupLayout.PREFERRED_SIZE, 652, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btSelectDir)
                .addGap(18, 18, 18)
                .addComponent(lblDirPath)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblSizeNonRec))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lblSizeRec))
                .addContainerGap(91, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btSelectDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSelectDirActionPerformed

        JFileChooser chooser = FileChooserHelper.getFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Choose a directory to compute the size of");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File dir = chooser.getSelectedFile();
            lblDirPath.setText("selected: " + dir);
            lblSizeNonRec.setText(String.format("%.2f KB", getDirectorySizeNonRec(dir) / 1024.0d));
            lblSizeRec.setText(String.format("%.2f KB", getDirectorySizeRec(dir) / 1024.0d));
        }
    }//GEN-LAST:event_btSelectDirActionPerformed


    public static void runWindowNewJFrame() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btSelectDir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lblDirPath;
    private javax.swing.JLabel lblSizeNonRec;
    private javax.swing.JLabel lblSizeRec;
    // End of variables declaration//GEN-END:variables

////////////////////////////////////////////////////////////////////////////////
//// CUSTOM CODE: //////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////// THIS GOES IN ITS OWN JAVA FILE
    public class FileChooserHelper {

        // Pattern: Singleton!
        private static JFileChooser chooser;

        public static JFileChooser getFileChooser() {
            if (chooser == null) {
                chooser = new JFileChooser();
            }
            return chooser;
        }
    }
    //////////////////////////////////////////////////////// ^^^END: other file

    ///////////////////////////////////////////////////////// CUSTOM METHODS
    
    ////////////////////////////////////////////////// non-recursive version ...
    private long getDirectorySizeNonRec(File dir) {
        long total = 0;
        for (File f : dir.listFiles()) {
            if (f.isFile()) {
                total += f.length();
            }
        }
        return total;
    }

    ///////////////////////////////////////////////////// RECURSIVE FILE GETTING
    private long getDirectorySizeRec(File dir) {
        long total = 0;
        for (File f : dir.listFiles()) {
            if (f.isFile()) { // non-rec case
                total += f.length();
            } if (f.isDirectory()) { // recursive case
                total += getDirectorySizeRec(f);
            }
        }
        return total;
    }
    
}
